# UIBIN Component Library Project Plan

## 1. Project Overview
UIBIN is a customizable component library for SvelteKit applications built with Svelte 5, TypeScript, and Tailwind 4, using Bun as the runtime and package manager. It follows Shopify Polaris design principles and uses Lucide Svelte for icons.

### Goals:
- Create a comprehensive, type-safe component library
- Ensure full customizability through a centralized theming system
- Provide a CLI tool for installing components individually
- Follow best practices for accessibility, performance, and developer experience

## 2. Project Structure
```
/src
  /lib
    /components
      /[component-name]
        index.ts           # Exports component
        ComponentName.svelte  # Component implementation
        types.ts           # Type definitions
    /utils                 # Utility functions
    /hooks                 # Custom hooks
    /types                 # Shared type definitions
    /theme                 # Theme system
    index.ts               # Main export file
  /cli                     # CLI tool
    installer.ts
  /docs                    # Documentation
```

## 3. Development Phases

### Phase 1: Project Setup and Core Infrastructure (Weeks 1-2) ✅
- [x] Initialize SvelteKit project with TypeScript
- [x] Configure Tailwind 4
- [x] Set up theme system (colors and radius)
- [x] Create theme provider component
- [x] Implement theme customization utilities
- [x] Set up component testing environment
- [x] Implement documentation site structure

### Phase 2: Base Components (Weeks 3-4) ✅
- [x] Implement fundamental layout components:
  - [x] Container, Box, Grid, Stack
- [x] Implement basic UI elements:
  - [x] Button, ButtonGroup
  - [x] Text Field, Checkbox, Radio
  - [x] Card, Divider

### Phase 3: Form Components (Weeks 5-6)
- [ ] Select, Combobox
- [ ] TextArea
- [ ] Switch, Slider
- [ ] DatePicker
- [ ] Form validation utilities

### Phase 4: Navigation and Data Display (Weeks 7-8)
- [ ] Tabs, Navigation
- [ ] Pagination, Breadcrumb
- [ ] Table, List
- [ ] Avatar, Badge, Tag

### Phase 5: Feedback and Overlay Components (Weeks 9-10)
- [ ] Alert, Toast
- [ ] Dialog (Modal)
- [ ] Popover, Tooltip
- [ ] Drawer, DropdownMenu
- [ ] Skeleton, Spinner

### Phase 6: Advanced Components (Weeks 11-12)
- [ ] DataTable
- [ ] Calendar
- [ ] RichTextEditor
- [ ] Charts (basic)
- [ ] InfiniteScroll

### Phase 7: CLI Tool Development (Weeks 13-14)
- [ ] Design CLI architecture
- [ ] Implement component installation
- [ ] Add theme customization options
- [ ] Add documentation and help commands
- [ ] Test across different project setups

### Phase 8: Documentation and Testing (Weeks 15-16)
- [ ] Complete component documentation
- [ ] Add usage examples
- [ ] Ensure test coverage for all components
- [ ] Performance testing and optimization
- [ ] Accessibility audit and improvements

## 4. Implementation Guidelines

### Theme System
- Use CSS variables for all theme values directly in `:root` and `.dark` selectors
- Define variables without unnecessary nesting to prevent specificity issues
- Ensure clear separation between default theme and dark theme variables
- Apply theme changes to the HTML element (not just body) to ensure proper inheritance
- Use reactive state management for theme changes with proper cleanup of subscriptions
- Always handle theme persistence with both client-side and server-side considerations

### Svelte 5 Specific Guidelines
- Use runes mode (`$state`, `$effect`, etc.) consistently throughout components
- Be aware of limitations with certain Svelte lifecycle methods in runes mode (e.g., `afterUpdate`)
- Properly type all reactive variables and function parameters
- Use `onclick` attribute instead of `on:click` directive following Svelte 5 best practices
- Handle proper store subscription cleanup in `$effect` to prevent memory leaks
- Be careful with state references in templates to avoid "referenced locally" warnings

### Component Design Principles
- Follow Shopify Polaris design principles
- Ensure keyboard accessibility for all interactive components
- Properly implement ARIA attributes
- Support both SSR and CSR rendering
- Minimize bundle size through code splitting
- Implement cross-component communication through context where appropriate
- Make components resilient to server/client rendering differences

### Development Standards
- Full TypeScript typing, no 'any' types
- Add explicit type annotations for callback functions and store subscribers
- Use script tag with `lang="ts"` for all TypeScript components
- Comprehensive test coverage, including theme switching functionality
- Consistent code style and formatting
- Clear documentation and examples
- Add debugging helpers that can be toggled on/off

## 5. Release Strategy
- Alpha release: Basic components and theme system
- Beta release: Complete component set, CLI tool in testing
- 1.0 release: Full component library, CLI tool, and documentation

## 6. Maintenance Plan
- Regular updates to align with Svelte, Tailwind, and Bun releases
- Semantic versioning for predictable updates
- Performance and accessibility improvements
- Community contribution guidelines
- Established issue templates and bug reporting process

## 7. Component Development Priority
1. Core layout components ✅
2. Form elements ✅
3. Navigation components
4. Data display components
5. Feedback components
6. Overlay components
7. Advanced components

## 8. Lessons Learned & Best Practices
- Theme toggle implementation requires careful coordination between CSS and JS
- ThemeProvider needs to be the outermost component in the application
- CSS specificity issues can be solved with higher specificity selectors and careful cascade management
- Server-side rendering requires special handling for theme detection
- Store subscriptions must be properly cleaned up to prevent memory leaks
- Adding debugging indicators helps identify issues during development
- Component props should have explicit defaults to avoid undefined behavior

## 9. Current Challenges and Next Steps
- Refactor remaining components to use Svelte 5 runes consistently
- Address ARIA attribute warnings in form components
- Implement comprehensive unit and integration tests for theme system
- Create storybook or similar system for isolated component development
- Implement automated a11y testing to catch accessibility issues early
- Document theme customization process comprehensively
